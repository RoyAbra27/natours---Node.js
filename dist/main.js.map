{"mappings":"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","sources":["server.js","utils/config.js","app.js","routes/tourRoutes.js","controllers/authController.js","models/userModel.js","utils/appError.js","utils/catchAsync.js","utils/email.js","controllers/tourController.js","models/tourModel.js","controllers/handlerFactory.js","utils/apiFeatures.js","routes/reviewRoutes.js","controllers/reviewController.js","models/reviewModel.js","routes/userRoutes.js","controllers/userController.js","controllers/errorController.js","routes/viewRoutes.js","controllers/viewsController.js","models/bookingModel.js","controllers/bookingController.js","routes/bookingRoutes.js"],"sourcesContent":["/* eslint-disable import/first */\r\nimport mongoose from 'mongoose';\r\n\r\nprocess.on('uncaughtException', (err) => {\r\n  console.error('UNHANDLED EXCEPTION! Shutting down...');\r\n  console.log(err.name, err.message);\r\n  process.exit(1);\r\n});\r\n\r\nimport './utils/config.js';\r\nimport app from './app.js';\r\n\r\nconst DB = process.env.DATABASE.replace(\r\n  '<PASSWORD>',\r\n  process.env.DATABASE_PASSWORD\r\n);\r\n\r\nmongoose.connect(DB).then(() => {\r\n  console.log('DB connection ACTIVE');\r\n});\r\n\r\nconst port = process.env.PORT;\r\n\r\nconst server = app.listen(port, () => {\r\n  console.log('http://localhost:3000');\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\nprocess.on('unhandledRejection', (err) => {\r\n  console.error('UNHANDLED REJECTION! Shutting down...');\r\n  console.log(err.name, err.message);\r\n  server.close(() => {\r\n    process.exit(1);\r\n  });\r\n});\r\n","import * as dotenv from 'dotenv';\r\n\r\ndotenv.config({ path: './config.env' });\r\n","/* eslint-disable import/no-extraneous-dependencies */\nimport './utils/config.js';\nimport Express from 'express';\nimport morgan from 'morgan';\nimport rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport ExpressMongoSanitize from 'express-mongo-sanitize';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport compression from 'compression';\n\nimport { tourRouter } from './routes/tourRoutes.js';\nimport { userRouter } from './routes/userRoutes.js';\nimport { globalErrorHandler } from './controllers/errorController.js';\nimport { reviewRouter } from './routes/reviewRoutes.js';\nimport { viewRouter } from './routes/viewRoutes.js';\nimport { bookingRouter } from './routes/bookingRoutes.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = Express();\n\n/* Setting the view engine to pug and the views to the views folder. */\napp.set('view engine', 'pug');\napp.set('views', path.join(__dirname, 'views'));\n\n/* Serving the static files in the public folder. */\napp.use(Express.static(path.join(__dirname, 'public')));\n\n/* A security package that sets some HTTP headers. */\napp.use(\n  helmet({\n    crossOriginResourcePolicy: { policy: 'cross-origin' },\n    contentSecurityPolicy: false,\n    crossOriginEmbedderPolicy: false,\n    crossOriginOpenerPolicy: false,\n  })\n);\n\n/* Checking if the environment is development, if it is, it will use morgan to log the requests. */\nif (process.env.NODE_ENV === 'development') {\n  app.use(morgan('dev'));\n}\n\n/* Limiting the number of requests to 100 per hour. */\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,\n  message: 'Too many requests, Please try again later.',\n});\napp.use('/api', limiter);\n\n/* A middleware that will parse the body of the request and make it available in the request object. */\napp.use(Express.json({ limit: '10kb' }));\n\napp.use(cookieParser());\n\n/* A middleware that will sanitize the request body, query string, and parameters. It will remove the $\nand . characters from the request. */\napp.use(ExpressMongoSanitize());\n\n/* A middleware that will prevent the parameter pollution. */\napp.use(\n  hpp({\n    whitelist: [\n      'duration',\n      'ratingsQuantity',\n      'ratingsAverage',\n      'maxGroupSize',\n      'difficulty',\n      'price',\n    ],\n  })\n);\napp.use(compression());\n// ROUTES\napp.use('/', viewRouter);\napp.use('/api/v1/tours', tourRouter);\napp.use('/api/v1/users', userRouter);\napp.use('/api/v1/reviews', reviewRouter);\napp.use('/api/v1/booking', bookingRouter);\n\n/* A middleware that will catch all the errors that are not caught by the other middlewares. */\napp.use(globalErrorHandler);\n\nexport default app;\n","import Express from 'express';\r\nimport { protect, restrictTo } from '../controllers/authController.js';\r\nimport {\r\n  getAllTours,\r\n  getTour,\r\n  createTour,\r\n  updateTour,\r\n  deleteTour,\r\n  aliasTopTours,\r\n  getTourStats,\r\n  getMonthlyPlan,\r\n  getToursWithin,\r\n  getDistances,\r\n  uploadTourImages,\r\n  resizeTourImages,\r\n} from '../controllers/tourController.js';\r\nimport { reviewRouter } from './reviewRoutes.js';\r\n\r\nconst router = Express.Router();\r\n\r\nrouter.use('/:tourId/reviews', reviewRouter);\r\n\r\nrouter.route('/top-5-tours').get(aliasTopTours, getAllTours);\r\nrouter.route('/tour-stats').get(getTourStats);\r\nrouter\r\n  .route('/monthly-plan/:year')\r\n  .get(protect, restrictTo('admin', 'lead-guide', 'guide'), getMonthlyPlan);\r\n\r\nrouter\r\n  .route('/tours-within/:distance/center/:latlng/unit/:unit')\r\n  .get(getToursWithin);\r\n\r\nrouter.route('/distances/:latlng/unit/:unit').get(getDistances);\r\n\r\nrouter\r\n  .route('/')\r\n  .get(getAllTours)\r\n  .post(protect, restrictTo('admin', 'lead-guide'), createTour);\r\n\r\nrouter\r\n  .route('/:id')\r\n  .get(getTour)\r\n  .patch(\r\n    protect,\r\n    restrictTo('admin', 'lead-guide'),\r\n    uploadTourImages,\r\n    resizeTourImages,\r\n    updateTour\r\n  )\r\n  .delete(protect, restrictTo('admin', 'lead-guide'), deleteTour);\r\n\r\nexport { router as tourRouter };\r\n","import Jwt from 'jsonwebtoken';\r\nimport { promisify } from 'util';\r\nimport crypto from 'crypto';\r\nimport User from '../models/userModel.js';\r\nimport { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\nimport Email from '../utils/email.js';\r\n\r\nconst signToken = (id) =>\r\n  Jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: process.env.JWT_EXPIRES_IN,\r\n  });\r\n\r\nconst createSendToken = (user, statusCode, res) => {\r\n  const token = signToken(user._id);\r\n  const cookieOptions = {\r\n    expires: new Date(\r\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\r\n    ),\r\n    httpOnly: true,\r\n  };\r\n  if (process.env.NODE_ENV === 'production') {\r\n    cookieOptions.secure = true;\r\n  }\r\n\r\n  res.cookie('jwt', token, cookieOptions);\r\n\r\n  res.status(statusCode).json({\r\n    status: 'success',\r\n    token,\r\n    data: {\r\n      user: user,\r\n    },\r\n  });\r\n};\r\n\r\nexport const signup = catchAsync(async (req, res, next) => {\r\n  const newUser = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n  });\r\n  newUser.password = undefined;\r\n\r\n  // `${req.protocol}://${req.get('host')}/me`;\r\n  const url = 'http://localhost:3000/me';\r\n  await new Email(newUser, url).sendWelcome();\r\n\r\n  createSendToken(newUser, 201, res);\r\n});\r\n\r\nexport const login = catchAsync(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    return next(new AppError('Please provide email and password!', 400));\r\n  }\r\n  const user = await User.findOne({ email }).select('+password');\r\n\r\n  if (!user || !(await user.correctPassword(password, user.password))) {\r\n    return next(new AppError('Incorrect email or password', 401));\r\n  }\r\n  createSendToken(user, 200, res);\r\n});\r\n\r\nexport const logout = (req, res) => {\r\n  res.cookie('jwt', 'null', {\r\n    expires: new Date(Date.now() + 10 * 1000),\r\n    httpOnly: true,\r\n  });\r\n  res.status(200).json({\r\n    status: 'success',\r\n  });\r\n};\r\n\r\nexport const protect = catchAsync(async (req, res, next) => {\r\n  let token;\r\n  /* This is checking if the user is logged in. If the user is not logged in, it will throw an error. */\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith('Bearer')\r\n  ) {\r\n    token = req.headers.authorization.split(' ')[1];\r\n  } else if (req.cookies.jwt) {\r\n    token = req.cookies.jwt;\r\n  }\r\n  if (!token) {\r\n    return next(\r\n      new AppError('You are not logged in! Please log in to get access.', 401)\r\n    );\r\n  }\r\n  /* Verifying the token. */\r\n  const decodedToken = await promisify(Jwt.verify)(\r\n    token,\r\n    process.env.JWT_SECRET\r\n  );\r\n\r\n  /* This is checking if the user still exists. If the user does not exist, it will throw an error. */\r\n  const currentUser = await User.findById(decodedToken.id);\r\n  if (!currentUser) {\r\n    return next(\r\n      new AppError(\r\n        'The user belonging to this token does no longer exist.',\r\n        401\r\n      )\r\n    );\r\n  }\r\n  /* This is checking if the user has changed their password after the token was issued. If the user\r\n  has changed their password after the token was issued, it will throw an error. */\r\n  if (currentUser.changedPasswordAfter(decodedToken.iat)) {\r\n    return next(\r\n      new AppError(\r\n        'Password has been changed recently. Please log in again.',\r\n        401\r\n      )\r\n    );\r\n  }\r\n  req.user = currentUser;\r\n  res.locals.user = currentUser;\r\n  next();\r\n});\r\n\r\n/**\r\n * If the user's role is not included in the roles array, then return a new AppError.\r\n * @param roles - an array of roles that are allowed to access the route\r\n */\r\nexport const restrictTo =\r\n  (...roles) =>\r\n  (req, res, next) => {\r\n    if (!roles.includes(req.user.role)) {\r\n      return next(\r\n        new AppError('You do not have permission to preform this action.', 403)\r\n      );\r\n    }\r\n    next();\r\n  };\r\n\r\n/* This is the forgot password route. It is checking if the user exists. If the user does not exist, it\r\nwill throw an error. It is also creating a reset token and saving it to the database. It is also\r\ncreating a reset URL and a message. It is sending an email to the user. If the email is not sent, it\r\nwill set the passwordResetToken and passwordResetExpires to undefined and save it to the database.\r\nIt will then throw an error. */\r\nexport const forgotPassword = catchAsync(async (req, res, next) => {\r\n  /* This is checking if the user exists. If the user does not exist, it will throw an error. */\r\n  const user = await User.findOne({ email: req.body.email });\r\n  if (!user) {\r\n    return next(new AppError('There in no user with that email address.', 404));\r\n  }\r\n  /* This is creating a reset token and saving it to the database. It is also creating a reset URL and\r\n  a message. */\r\n  const resetToken = user.createPasswordResetToken();\r\n  await user.save({ validateBeforeSave: false });\r\n\r\n  /* Sending an email to the user. If the email is not sent, it will set the passwordResetToken and\r\n  passwordResetExpires to undefined and save it to the database. It will then throw an error. */\r\n  try {\r\n    const resetURL = `${req.protocol}://${req.get(\r\n      'host'\r\n    )}/api/v1/users/reset-password/${resetToken}`;\r\n\r\n    await new Email(user, resetURL).sendPasswordReset();\r\n\r\n    res.status(200).json({\r\n      status: 'success',\r\n      message: 'Token sent to email',\r\n    });\r\n  } catch (err) {\r\n    user.passwordResetToken = undefined;\r\n    user.passwordResetExpires = undefined;\r\n    await user.save({ validateBeforeSave: false });\r\n    return next(\r\n      new AppError(\r\n        'There was an error sending the email. Please try again!',\r\n        500\r\n      )\r\n    );\r\n  }\r\n});\r\n\r\n/* This is the reset password route. It is checking if the token is valid and if it has expired. If the\r\ntoken is valid and has not expired, it will update the user's password. It will then send a new\r\ntoken to the user. */\r\nexport const resetPassword = catchAsync(async (req, res, next) => {\r\n  const hashedToken = crypto\r\n    .createHash('sha256')\r\n    .update(req.params.token)\r\n    .digest('hex');\r\n\r\n  const user = await User.findOne({\r\n    passwordResetToken: hashedToken,\r\n    passwordResetExpires: { $gt: Date.now() },\r\n  });\r\n  if (!user) {\r\n    return next(new AppError('Token is invalid or has expired', 400));\r\n  }\r\n  user.password = req.body.password;\r\n  user.passwordConfirm = req.body.passwordConfirm;\r\n  user.passwordResetToken = undefined;\r\n  user.passwordResetExpires = undefined;\r\n  await user.save();\r\n\r\n  createSendToken(user, 200, res);\r\n});\r\n\r\n/* Checking if the user's password is correct. If the user's password is not correct, it will throw an\r\nerror. It is also updating the user's password. It is then sending a new token to the user. */\r\nexport const updatePassword = catchAsync(async (req, res, next) => {\r\n  const user = await User.findById(req.user.id).select('+password');\r\n\r\n  if (!(await user.correctPassword(req.body.passwordCurrent, user.password))) {\r\n    return next(new AppError('Your current password is wrong.', 401));\r\n  }\r\n  user.password = req.body.password;\r\n  user.passwordConfirm = req.body.passwordConfirm;\r\n  await user.save();\r\n\r\n  createSendToken(user, 200, res);\r\n});\r\n\r\nexport const isLoggedIn = async (req, res, next) => {\r\n  if (req.cookies.jwt) {\r\n    try {\r\n      /* Verifying the token. */\r\n      const decodedToken = await promisify(Jwt.verify)(\r\n        req.cookies.jwt,\r\n        process.env.JWT_SECRET\r\n      );\r\n      /* Checking if the user still exists. If the user does not exist, it will throw an error. */\r\n      const currentUser = await User.findById(decodedToken.id);\r\n      if (!currentUser) {\r\n        return next();\r\n      }\r\n      /* Checking if the user has changed their password after the token was issued. If the user\r\n  has changed their password after the token was issued, it will throw an error. */\r\n      if (currentUser.changedPasswordAfter(decodedToken.iat)) {\r\n        return next();\r\n      }\r\n      res.locals.user = currentUser;\r\n      return next();\r\n    } catch (error) {\r\n      return next();\r\n    }\r\n  }\r\n  next();\r\n};\r\n","import mongoose from 'mongoose';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcryptjs';\r\nimport crypto from 'crypto';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Please tell us your name!'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Please provide your email.'],\r\n    unique: true,\r\n    lowercase: true,\r\n    validate: [validator.isEmail, 'Please provide a valid email.'],\r\n  },\r\n  photo: {\r\n    type: String,\r\n    default: 'default.jpg',\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'guide', 'lead-guide', 'admin'],\r\n    default: 'user',\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Please provide a password'],\r\n    minlength: 8,\r\n    select: false,\r\n  },\r\n  passwordConfirm: {\r\n    type: String,\r\n    required: [true, 'Please confirm your password'],\r\n    validate: {\r\n      validator: function (el) {\r\n        return el === this.password;\r\n      },\r\n      message: 'Passwords are not the same!',\r\n    },\r\n  },\r\n  passwordChangedAt: Date,\r\n  passwordResetToken: String,\r\n  passwordResetExpires: Date,\r\n  active: {\r\n    type: Boolean,\r\n    default: true,\r\n    select: false,\r\n  },\r\n});\r\n\r\n/* This is a middleware that runs before the save() or create() method. It hashes the password and\r\ndeletes the passwordConfirm field. */\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n\r\n  this.password = await bcrypt.hash(this.password, 12);\r\n  this.passwordConfirm = undefined;\r\n  next();\r\n});\r\n\r\n/* This is a middleware that runs before the save() or create() method. If the user has changed the password it sets the passwordChangedAt property to the current time.\r\nIf the password hasnt changed or its a newly created user, it will continue to the next middleware.*/\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password') || this.isNew) return next();\r\n\r\n  this.passwordChangedAt = Date.now() - 1000; // Ensure that the token will always be created after password change\r\n  next();\r\n});\r\n\r\nuserSchema.pre(/^find/, function (next) {\r\n  this.find({ active: { $ne: false } });\r\n  next();\r\n});\r\n\r\n/* This is a method that compares the candidate password with the user password. */\r\nuserSchema.methods.correctPassword = async function (\r\n  candidatePassword,\r\n  userPassword\r\n) {\r\n  return await bcrypt.compare(candidatePassword, userPassword);\r\n};\r\n\r\n/* This is a method that checks if the password was changed after the token was created. */\r\nuserSchema.methods.changedPasswordAfter = function (JWTTimestamp) {\r\n  if (this.passwordChangedAt) {\r\n    const changedTimestamp = parseInt(\r\n      this.passwordChangedAt.getTime() / 1000,\r\n      10\r\n    );\r\n    return JWTTimestamp < changedTimestamp; // if password was changed after the token was created return false\r\n  }\r\n  return false;\r\n};\r\n\r\n/* Creating a password reset token and setting the password reset token and password reset expires. */\r\nuserSchema.methods.createPasswordResetToken = function () {\r\n  const resetToken = crypto.randomBytes(32).toString('hex');\r\n  this.passwordResetToken = crypto\r\n    .createHash('sha256')\r\n    .update(resetToken)\r\n    .digest('hex');\r\n\r\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\r\n  return resetToken;\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nexport default User;\r\n","/* It's a class that extends the Error class and has a constructor that takes in a message and a status\r\ncode. */\r\nexport class AppError extends Error {\r\n  constructor(message, statusCode) {\r\n    super(message);\r\n\r\n    this.statusCode = statusCode;\r\n    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\r\n    this.isOperational = true;\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n","export default (func) => (req, res, next) => {\r\n  func(req, res, next).catch(next);\r\n};\r\n","import nodemailer from 'nodemailer';\r\nimport pug from 'pug';\r\nimport { fileURLToPath } from 'url';\r\nimport path from 'path';\r\nimport { htmlToText } from 'html-to-text';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nexport default class Email {\r\n  constructor(user, url) {\r\n    this.to = user.email;\r\n    this.firstName = user.name.split(' ')[0];\r\n    this.url = url;\r\n    this.from = `Roy Abramovich <${process.env.EMAIL_FROM}>`;\r\n  }\r\n\r\n  newTransport() {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return nodemailer.createTransport({\r\n        host: 'smtp.sendgrid.net',\r\n        port: 587,\r\n        auth: {\r\n          user: process.env.SENDGRID_USERNAME,\r\n          pass: process.env.SENDGRID_PASSWORD,\r\n        },\r\n      });\r\n    }\r\n    return nodemailer.createTransport({\r\n      host: process.env.EMAIL_HOST,\r\n      port: process.env.EMAIL_PORT,\r\n      auth: {\r\n        user: process.env.EMAIL_USERNAME,\r\n        pass: process.env.EMAIL_PASSWORD,\r\n      },\r\n    });\r\n  }\r\n\r\n  async send(template, subject) {\r\n    const html = pug.renderFile(`${__dirname}/../views/email/${template}.pug`, {\r\n      firstName: this.firstName,\r\n      url: this.url,\r\n      subject,\r\n    });\r\n    const mailOptions = {\r\n      from: this.from,\r\n      to: this.to,\r\n      subject,\r\n      html,\r\n      text: htmlToText(html),\r\n    };\r\n\r\n    await this.newTransport().sendMail(mailOptions);\r\n  }\r\n\r\n  async sendWelcome() {\r\n    await this.send('welcome', 'Welcome to the Natours family!');\r\n  }\r\n\r\n  async sendPasswordReset() {\r\n    await this.send('passwordReset', 'Password reset - valid for 10 minutes');\r\n  }\r\n}\r\n","import multer from 'multer';\r\nimport sharp from 'sharp';\r\nimport Tour from '../models/tourModel.js';\r\nimport { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\nimport {\r\n  createOne,\r\n  deleteOne,\r\n  getAll,\r\n  getOne,\r\n  updateOne,\r\n} from './handlerFactory.js';\r\n\r\nconst multerStorage = multer.memoryStorage();\r\nconst multerFilter = (req, file, cb) => {\r\n  if (file.mimetype.startsWith('image')) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new AppError('Please upload only images ', 400), false);\r\n  }\r\n};\r\n\r\nconst upload = multer({\r\n  storage: multerStorage,\r\n  fileFilter: multerFilter,\r\n});\r\n\r\nexport const uploadTourImages = upload.fields([\r\n  { name: 'imageCover', maxCount: 1 },\r\n  { name: 'images', maxCount: 3 },\r\n]);\r\n\r\nexport const resizeTourImages = catchAsync(async (req, res, next) => {\r\n  req.body.imageCover = `tour-${req.params.id}-${Date.now()}-cover.jpeg`;\r\n  await sharp(req.files.imageCover[0].buffer)\r\n    .resize(2000, 1333)\r\n    .toFormat('jpeg')\r\n    .jpeg({ quality: 90 })\r\n    .toFile(`public/img/tours/${req.body.imageCover}`);\r\n\r\n  req.body.images = [];\r\n  await Promise.all(\r\n    req.files.images.map(async (file, idx) => {\r\n      const filename = `tour-${req.params.id}-${Date.now()}-${idx + 1}.jpeg`;\r\n      await sharp(file.buffer)\r\n        .resize(2000, 1333)\r\n        .toFormat('jpeg')\r\n        .jpeg({ quality: 90 })\r\n        .toFile(`public/img/tours/${filename}`);\r\n      req.body.images.push(filename);\r\n    })\r\n  );\r\n  next();\r\n});\r\n\r\nexport const aliasTopTours = (req, res, next) => {\r\n  req.query.limit = '5';\r\n  req.query.sort = '-ratingsAverage, price';\r\n  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';\r\n  next();\r\n};\r\n\r\nexport const getAllTours = getAll(Tour, [\r\n  { path: 'guides', select: '-__v -passwordChangedAt' },\r\n]);\r\n\r\nexport const getTour = getOne(Tour, [\r\n  { path: 'guides', select: '-__v -passwordChangedAt' },\r\n  { path: 'reviews' },\r\n]);\r\n\r\nexport const createTour = createOne(Tour);\r\n\r\nexport const updateTour = updateOne(Tour);\r\n\r\nexport const deleteTour = deleteOne(Tour);\r\n\r\nexport const getTourStats = catchAsync(async (req, res, next) => {\r\n  const stats = await Tour.aggregate([\r\n    { $match: { ratingsAverage: { $gte: 4.5 } } },\r\n    {\r\n      $group: {\r\n        _id: { $toUpper: '$difficulty' },\r\n        numTours: { $sum: 1 },\r\n        numRatings: { $sum: '$ratingsQuantity' },\r\n        avgRating: { $avg: '$ratingsAverage' },\r\n        avgPrice: { $avg: '$price' },\r\n        minPrice: { $min: '$price' },\r\n        maxPrice: { $max: '$price' },\r\n      },\r\n    },\r\n    {\r\n      $sort: { avgPrice: 1 },\r\n    },\r\n  ]);\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: {\r\n      stats,\r\n    },\r\n  });\r\n});\r\n\r\nexport const getMonthlyPlan = catchAsync(async (req, res, next) => {\r\n  const year = req.params.year * 1;\r\n  const plan = await Tour.aggregate([\r\n    {\r\n      $unwind: '$startDates',\r\n    },\r\n    {\r\n      $match: {\r\n        startDates: {\r\n          $gte: new Date(`${year}-01-01`),\r\n          $lte: new Date(`${year}-12-31`),\r\n        },\r\n      },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: { $month: '$startDates' },\r\n        numTourStarts: { $sum: 1 },\r\n        tours: { $push: '$name' },\r\n      },\r\n    },\r\n    {\r\n      $addFields: { month: '$_id' },\r\n    },\r\n    {\r\n      $project: { _id: 0 },\r\n    },\r\n    {\r\n      $sort: { numTourStarts: -1 },\r\n    },\r\n  ]);\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: {\r\n      plan,\r\n    },\r\n  });\r\n});\r\n\r\nexport const getToursWithin = catchAsync(async (req, res, next) => {\r\n  const { distance, latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(',');\r\n  /* Converting the distance from miles to kilometers. */\r\n  const radius = unit === 'mi' ? distance / 3963.2 : distance / 6378.1;\r\n\r\n  if (!lat || !lng) {\r\n    next(\r\n      new AppError(\r\n        'Please provide latitude and longtitude in the format lat,lng',\r\n        400\r\n      )\r\n    );\r\n  }\r\n\r\n  /* Using the  operator to find all the tours that are within the radius of the center\r\n  sphere. */\r\n  const tours = await Tour.find({\r\n    startLocation: { $geoWithin: { $centerSphere: [[lng, lat], radius] } },\r\n  });\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    results: tours.length,\r\n    data: { tours },\r\n  });\r\n});\r\n\r\nexport const getDistances = catchAsync(async (req, res, next) => {\r\n  const { latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(',');\r\n\r\n  /* Converting the distance from miles to kilometers. */\r\n  const multiplier = unit === 'mi' ? 0.000621371 : 0.001;\r\n\r\n  if (!lat || !lng) {\r\n    next(\r\n      new AppError(\r\n        'Please provide latitude and longtitude in the format lat,lng',\r\n        400\r\n      )\r\n    );\r\n  }\r\n  /* Using the  operator to calculate the distance between the center point and the tours. */\r\n  const distances = await Tour.aggregate([\r\n    {\r\n      $geoNear: {\r\n        near: {\r\n          type: 'Point',\r\n          coordinates: [lng * 1, lat * 1],\r\n        },\r\n        distanceField: 'distance',\r\n        distanceMultiplier: multiplier,\r\n      },\r\n    },\r\n    {\r\n      $project: {\r\n        distance: 1,\r\n        name: 1,\r\n      },\r\n    },\r\n  ]);\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: distances,\r\n  });\r\n});\r\n","import mongoose from 'mongoose';\r\nimport slugify from 'slugify';\r\n\r\nconst tourSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, 'A tour must have a name'],\r\n      unique: true,\r\n      trim: true,\r\n      maxlength: [40, 'Tour name mast have less than 40 characters'],\r\n      minlength: [10, 'Tour name mast have more than 10 characters'],\r\n    },\r\n    slug: String,\r\n    duration: {\r\n      type: Number,\r\n      required: [true, 'A tour must have a duration'],\r\n    },\r\n    maxGroupSize: {\r\n      type: Number,\r\n      required: [true, 'A tour must have a group size'],\r\n    },\r\n    difficulty: {\r\n      type: String,\r\n      required: [true, 'A tour must have a difficulty'],\r\n      enum: {\r\n        values: ['easy', 'medium', 'difficult'],\r\n        message: 'Difficulty is either: easy, medium, difficult',\r\n      },\r\n    },\r\n    ratingsAverage: {\r\n      type: Number,\r\n      default: 4.5,\r\n      set: (val) => Math.round(val * 10) / 10,\r\n    },\r\n    ratingsQuantity: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    price: {\r\n      type: Number,\r\n      required: [true, 'A tour must have a price '],\r\n    },\r\n    priceDiscount: {\r\n      type: Number,\r\n      validate: {\r\n        validator: function (val) {\r\n          return val < this.price;\r\n        },\r\n        message: 'Discount price ({VALUE}) should be below regular price',\r\n      },\r\n    },\r\n    summary: {\r\n      type: String,\r\n      trim: true,\r\n      required: [true, 'A tour must have a summary '],\r\n    },\r\n    description: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n    imageCover: {\r\n      type: String,\r\n      required: [true, 'A tour must have a cover image '],\r\n    },\r\n    images: [String],\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n      select: false,\r\n    },\r\n    startDates: [Date],\r\n    vipTour: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    startLocation: {\r\n      type: {\r\n        type: String,\r\n        default: 'Point',\r\n        enum: ['Point'],\r\n      },\r\n      coordinates: [Number],\r\n      address: String,\r\n      description: String,\r\n    },\r\n    locations: [\r\n      {\r\n        type: {\r\n          type: String,\r\n          default: 'Point',\r\n          enum: ['Point'],\r\n        },\r\n        coordinates: [Number],\r\n        address: String,\r\n        description: String,\r\n        day: Number,\r\n      },\r\n    ],\r\n    guides: [\r\n      {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'User',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\ntourSchema.index({ price: 1, ratingsAverage: -1 });\r\ntourSchema.index({ slug: 1 });\r\ntourSchema.index({ startLocation: '2dsphere' });\r\n\r\ntourSchema.virtual('durationWeeks').get(function () {\r\n  return this.duration / 7;\r\n});\r\n\r\ntourSchema.virtual('reviews', {\r\n  ref: 'Review',\r\n  foreignField: 'tour',\r\n  localField: '_id',\r\n});\r\n// DOC MIDDLEWARE\r\ntourSchema.pre('save', function (next) {\r\n  this.slug = slugify(this.name, { lower: true });\r\n  next();\r\n});\r\n\r\n// QUERY MIDDLEWARE\r\ntourSchema.pre(/^find/, function (next) {\r\n  this.find({ vipTour: { $ne: true } });\r\n  next();\r\n});\r\n\r\n// // AGGREGATION MIDDLEWARE\r\n// tourSchema.pre('aggregate', function (next) {\r\n//   this.pipeline().unshift({ $match: { vipTour: { $ne: true } } });\r\n//   next();\r\n// });\r\n\r\nconst Tour = mongoose.model('Tour', tourSchema);\r\nexport default Tour;\r\n","import { APIFeatures } from '../utils/apiFeatures.js';\r\nimport { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\n\r\n// Global handle functions for the controllers\r\n\r\n/**\r\n * It takes a Mongoose model as an argument, and returns a function that takes a request, response, and\r\n * next function as arguments, and deletes a document from the database based on the id in the request\r\n * parameters.\r\n * @param Model - The model that we want to delete a document from.\r\n */\r\nexport const deleteOne = (Model) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const doc = await Model.findByIdAndDelete(req.params.id);\r\n\r\n    if (!doc) {\r\n      return next(new AppError('No document found with that ID', 404));\r\n    }\r\n\r\n    res.status(204).json({\r\n      status: 'success',\r\n      data: null,\r\n    });\r\n  });\r\n\r\n/**\r\n * It takes a Mongoose model as an argument, and returns a function that takes a request, response, and\r\n * next function as arguments, and returns a response with the updated document.\r\n * @param Model - The model that we want to update.\r\n */\r\nexport const updateOne = (Model) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const doc = await Model.findByIdAndUpdate(req.params.id, req.body, {\r\n      new: true,\r\n      runValidators: true,\r\n      returnDocument: 'after',\r\n    });\r\n\r\n    if (!doc) {\r\n      return next(new AppError('No document found with that ID', 404));\r\n    }\r\n\r\n    res.status(200).json({\r\n      status: 'success',\r\n      data: {\r\n        doc,\r\n      },\r\n    });\r\n  });\r\n\r\n/**\r\n * It creates a new document in the database and returns it to the client\r\n * @param Model - The model that we want to create a document for.\r\n */\r\nexport const createOne = (Model) =>\r\n  catchAsync(async (req, res, next) => {\r\n    const newDoc = await Model.create(req.body);\r\n\r\n    res.status(201).json({\r\n      status: 'success',\r\n      data: {\r\n        newDoc,\r\n      },\r\n    });\r\n  });\r\n\r\n/**\r\n * It takes a model and an array of populate options and returns a function that takes a request,\r\n * response and next function and returns a document with the given id and populates it with the given\r\n * options\r\n * @param Model - The model you want to query\r\n * @param popOptions - an array of strings that are the names of the fields that you want to populate.\r\n */\r\nexport const getOne = (Model, popOptions) =>\r\n  catchAsync(async (req, res, next) => {\r\n    let query = Model.findById(req.params.id);\r\n    if (popOptions)\r\n      popOptions.forEach((element) => {\r\n        query = query.populate(element);\r\n      });\r\n    const doc = await query;\r\n\r\n    if (!doc) {\r\n      return next(new AppError('No document found with that ID', 404));\r\n    }\r\n\r\n    res.status(200).json({\r\n      status: 'success',\r\n      data: {\r\n        doc,\r\n      },\r\n    });\r\n  });\r\n\r\n/**\r\n * It takes in a model, and an array of options to populate, and returns a function that takes in a\r\n * request, response, and next, and returns a response with the populated data\r\n * @param Model - The model that you want to query\r\n * @param popOptions - an array of strings that are the names of the fields that you want to populate.\r\n */\r\nexport const getAll = (Model, popOptions) =>\r\n  catchAsync(async (req, res, next) => {\r\n    /* Checking if the request has a tourId in the params, and if it does, it sets the filter to be the\r\n    tourId.  JUST FOR GETTING REVIEWS*/\r\n    let filter = {};\r\n    if (req.params.tourId) filter = { tour: req.params.tourId };\r\n\r\n    const features = new APIFeatures(Model.find(filter), req.query)\r\n      .filter()\r\n      .sort()\r\n      .limitFields()\r\n      .paginate();\r\n    if (popOptions)\r\n      popOptions.forEach((element) => {\r\n        features.query = features.query.populate(element);\r\n      });\r\n    const doc = await features.query;\r\n\r\n    res.status(200).json({\r\n      status: 'success',\r\n      results: doc.length,\r\n      data: {\r\n        doc,\r\n      },\r\n    });\r\n  });\r\n","export class APIFeatures {\r\n  constructor(query, queryString) {\r\n    this.query = query;\r\n    this.queryString = queryString;\r\n  }\r\n\r\n  filter() {\r\n    /* Deleting the page, sort, limit, and fields from the query string. */\r\n    const queryObj = { ...this.queryString };\r\n    const excludedFields = ['page', 'sort', 'limit', 'fields'];\r\n    excludedFields.forEach((el) => delete queryObj[el]);\r\n\r\n    /* This is a way to convert the query string into a mongoose query. */\r\n    let queryStr = JSON.stringify(queryObj);\r\n    queryStr = queryStr.replace(/\\b(gte|gt|lte|lt)\\b/g, (match) => `$${match}`);\r\n    this.query = this.query.find(JSON.parse(queryStr));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * If the queryString has a sort property, then sort the query by the sort property, otherwise sort\r\n   * the query by name.\r\n   */\r\n  sort() {\r\n    if (this.queryString.sort) {\r\n      const sortBy = this.queryString.sort.split(',').join(' ');\r\n      this.query = this.query.sort(sortBy);\r\n    } else {\r\n      this.query = this.query.sort('createdAt');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  limitFields() {\r\n    /* This is a way to select the fields that you want to be returned in the response. */\r\n    if (this.queryString.fields) {\r\n      const fields = this.queryString.fields.split(',').join(' ');\r\n      this.query = this.query.select(fields);\r\n    } else {\r\n      this.query = this.query.select('-__v');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /* This is a way to paginate the results. */\r\n  paginate() {\r\n    const page = this.queryString.page * 1 || 1;\r\n    const limit = this.queryString.limit * 1 || 100;\r\n    const skip = (page - 1) * limit;\r\n\r\n    this.query = this.query.skip(skip).limit(limit);\r\n    return this;\r\n  }\r\n}\r\n","import Express from 'express';\r\nimport { protect, restrictTo } from '../controllers/authController.js';\r\nimport {\r\n  createReview,\r\n  deleteReview,\r\n  getAllReviews,\r\n  getReview,\r\n  setTourUserIds,\r\n  updateReview,\r\n} from '../controllers/reviewController.js';\r\n\r\nconst router = Express.Router({ mergeParams: true });\r\n\r\nrouter\r\n  .route('/')\r\n  .get(getAllReviews)\r\n  .post(protect, restrictTo('user'), setTourUserIds, createReview);\r\n\r\nrouter\r\n  .route('/:id')\r\n  .get(getReview)\r\n  .patch(protect, restrictTo('admin', 'user'), updateReview)\r\n  .delete(protect, restrictTo('admin', 'user'), deleteReview);\r\n\r\nexport { router as reviewRouter };\r\n","// import { AppError } from '../utils/appError.js';\r\nimport Review from '../models/reviewModel.js';\r\nimport {\r\n  createOne,\r\n  deleteOne,\r\n  getAll,\r\n  getOne,\r\n  updateOne,\r\n} from './handlerFactory.js';\r\n\r\nexport const getAllReviews = getAll(Review, [{ path: 'tour', select: 'name' }]);\r\n\r\nexport const getReview = getOne(Review, [{ path: 'tour', select: 'name' }]);\r\n\r\nexport const createReview = createOne(Review);\r\n\r\nexport const updateReview = updateOne(Review);\r\n\r\nexport const deleteReview = deleteOne(Review);\r\n\r\n/**\r\n * This function is called before the createReview function and it sets the user and tour ids in the\r\n * request body.\r\n */\r\nexport const setTourUserIds = (req, res, next) => {\r\n  req.body.user = req.user.id;\r\n  req.body.tour = req.params.tourId;\r\n  next();\r\n};\r\n","import mongoose from 'mongoose';\r\nimport Tour from './tourModel.js';\r\n\r\nconst reviewSchema = new mongoose.Schema(\r\n  {\r\n    review: {\r\n      type: String,\r\n      required: [true, 'Review can not be empty!'],\r\n    },\r\n    rating: {\r\n      type: Number,\r\n      min: 1,\r\n      max: 5,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    tour: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'Tour',\r\n      required: [true, 'Must select a tour for the review.'],\r\n    },\r\n    user: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User',\r\n      required: [true, 'Must be logged in to write a review.'],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nreviewSchema.index({ user: 1, tour: 1 }, { unique: true });\r\n\r\nreviewSchema.pre(/^find/, function (next) {\r\n  this.populate({\r\n    path: 'user',\r\n    select: 'name photo',\r\n  }).sort('-createdAt');\r\n  next();\r\n});\r\n\r\n/* A static method that is used to calculate the average rating of a tour. */\r\nreviewSchema.statics.calcAverageRating = async function (tourId) {\r\n  const stats = await this.aggregate([\r\n    {\r\n      $match: { tour: tourId },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: '$tour',\r\n        numRatings: { $sum: 1 },\r\n        avgRating: { $avg: '$rating' },\r\n      },\r\n    },\r\n  ]);\r\n  /* Updating the tour with the new average rating and the number of ratings. */\r\n  if (stats.length > 0) {\r\n    await Tour.findByIdAndUpdate(tourId, {\r\n      ratingsQuantity: stats[0].numRatings,\r\n      ratingsAverage: stats[0].avgRating,\r\n    });\r\n  } else {\r\n    await Tour.findByIdAndUpdate(tourId, {\r\n      ratingsQuantity: 0,\r\n      ratingsAverage: 4.5,\r\n    });\r\n  }\r\n};\r\n\r\n/* This is a post middleware that is used to calculate the average rating of a tour after a review is\r\nsaved. */\r\nreviewSchema.post('save', function () {\r\n  this.constructor.calcAverageRating(this.tour);\r\n});\r\n\r\n// /* This is a post middleware that is used to calculate the average rating of a tour after a review is\r\n// updated or deleted. */\r\nreviewSchema.post(/^findOneAnd/, async (document) => {\r\n  await document.constructor.calcAverageRating(document.tour);\r\n});\r\n\r\nconst Review = mongoose.model('Review', reviewSchema);\r\n\r\nexport default Review;\r\n","import Express from 'express';\r\nimport {\r\n  getAllUsers,\r\n  getUser,\r\n  updateUserAdmin,\r\n  deleteUser,\r\n  updateLoggedUser,\r\n  deactivateUser,\r\n  getMe,\r\n  uploadUserPhoto,\r\n  resizeUserPhoto,\r\n} from '../controllers/userController.js';\r\nimport {\r\n  signup,\r\n  login,\r\n  forgotPassword,\r\n  resetPassword,\r\n  protect,\r\n  updatePassword,\r\n  restrictTo,\r\n  logout,\r\n} from '../controllers/authController.js';\r\n\r\nexport const router = Express.Router();\r\n\r\nrouter.post('/signup', signup);\r\nrouter.post('/login', login);\r\nrouter.get('/logout', logout);\r\n\r\nrouter.post('/forgot-password', forgotPassword);\r\nrouter.patch('/reset-password/:token', resetPassword);\r\n\r\nrouter.use(protect); //From this point all of the routes require authentication\r\n\r\nrouter.get('/me', getMe, getUser);\r\nrouter.patch('/update-my-password', updatePassword);\r\nrouter.patch(\r\n  '/update-my-profile',\r\n  uploadUserPhoto,\r\n  resizeUserPhoto,\r\n  updateLoggedUser\r\n);\r\nrouter.delete('/deactivate-my-account', deactivateUser);\r\n\r\nrouter.use(restrictTo('admin'));\r\n\r\nrouter.route('/').get(getAllUsers);\r\n\r\nrouter.route('/:id').get(getUser).patch(updateUserAdmin).delete(deleteUser);\r\n\r\nexport { router as userRouter };\r\n","import multer from 'multer';\r\nimport sharp from 'sharp';\r\nimport { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\nimport User from '../models/userModel.js';\r\nimport { deleteOne, getAll, getOne, updateOne } from './handlerFactory.js';\r\n\r\nconst multerStorage = multer.memoryStorage();\r\nconst multerFilter = (req, file, cb) => {\r\n  if (file.mimetype.startsWith('image')) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new AppError('Please upload only images ', 400), false);\r\n  }\r\n};\r\n\r\nconst upload = multer({\r\n  storage: multerStorage,\r\n  fileFilter: multerFilter,\r\n});\r\n\r\nexport const uploadUserPhoto = upload.single('photo');\r\nexport const resizeUserPhoto = catchAsync(async (req, res, next) => {\r\n  if (!req.file) return next();\r\n  req.file.filename = `user-${req.user.id}-${Date.now()}.jpeg`;\r\n  await sharp(req.file.buffer)\r\n    .resize(500, 500)\r\n    .toFormat('jpeg')\r\n    .jpeg({ quality: 90 })\r\n    .toFile(`public/img/users/${req.file.filename}`);\r\n  next();\r\n});\r\n\r\nexport const getAllUsers = getAll(User);\r\n\r\nexport const getUser = getOne(User);\r\n\r\nexport const updateUserAdmin = updateOne(User);\r\n\r\nexport const deleteUser = deleteOne(User);\r\n\r\n/**\r\n * If the user is logged in, then set the user's id to the request's id parameter.\r\n */\r\nexport const getMe = (req, res, next) => {\r\n  req.params.id = req.user.id;\r\n  next();\r\n};\r\n\r\n/**\r\n * It takes an object and an array of allowed fields, and returns a new object with only those allowed\r\n * fields.\r\n * @param obj - the object to filter\r\n * @param allowedFields - an array of strings that are allowed to be in the new object\r\n */\r\nconst filterObj = (obj, ...allowedFields) => {\r\n  const newObj = {};\r\n  Object.keys(obj).forEach((el) => {\r\n    if (allowedFields.includes(el)) newObj[el] = obj[el];\r\n  });\r\n  return newObj;\r\n};\r\n\r\nexport const updateLoggedUser = catchAsync(async (req, res, next) => {\r\n  /* Checking if the user is trying to update the password or passwordConfirm fields. If they are, it\r\n  will throw an error. */\r\n  if (req.body.password || req.body.passwordConfirm) {\r\n    return next(\r\n      new AppError(\r\n        'This route is not for password updates. Please use the correct route.',\r\n        400\r\n      )\r\n    );\r\n  }\r\n  /* Filtering the body of the request to only allow the name and email fields to be updated. */\r\n  const filteredBody = filterObj(req.body, 'name', 'email');\r\n  if (req.file) filteredBody.photo = req.file.filename;\r\n\r\n  /* Updating the user with the id of the logged user. It is using the filteredBody object to update\r\n  the user. */\r\n  const updatedUser = await User.findByIdAndUpdate(req.user.id, filteredBody, {\r\n    new: true,\r\n    runValidators: true,\r\n    returnDocument: 'after',\r\n  });\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: {\r\n      user: updatedUser,\r\n    },\r\n  });\r\n});\r\n\r\nexport const deactivateUser = catchAsync(async (req, res, next) => {\r\n  await User.findByIdAndUpdate(req.user.id, { active: false });\r\n  res.status(204).json({\r\n    status: 'success',\r\n    data: null,\r\n  });\r\n});\r\n","import { AppError } from '../utils/appError.js';\r\n\r\nconst handleCastErrorDB = (err) => {\r\n  const message = `Invalid ${err.path}: ${err.value}.`;\r\n  return new AppError(message, 400);\r\n};\r\n\r\nconst handleDuplicateFieldsDB = (err) => {\r\n  const message = `Duplicate field value: \"${err.keyValue.name}\", Please use another value!`;\r\n  return new AppError(message, 400);\r\n};\r\n\r\nconst handleValidationErrorDB = (err) => {\r\n  const errors = Object.values(err.errors).map((el) => el.message);\r\n  const message = `Invalid input data. ${errors.join('. ')}`;\r\n  return new AppError(message, 400);\r\n};\r\n\r\nconst handleJWTError = () =>\r\n  new AppError('Invalid token. Please log in again!', 404);\r\n\r\nconst handleJWTExpiredError = () =>\r\n  new AppError('Session expired. Please log in again!', 401);\r\n\r\nconst sendErrorDev = (err, req, res) => {\r\n  if (req.originalUrl.startsWith('/api')) {\r\n    return res.status(err.statusCode).json({\r\n      status: err.status,\r\n      error: err,\r\n      message: err.message,\r\n      stack: err.stack,\r\n    });\r\n  }\r\n  console.log('ERROR', err);\r\n  return res.status(err.statusCode).render('error', {\r\n    title: 'Something went wrong!',\r\n    msg: err.message,\r\n  });\r\n};\r\n\r\nconst sendErrorProd = (err, req, res) => {\r\n  // API ERRORS\r\n  if (req.originalUrl.startsWith('/api')) {\r\n    // Operational (known) error, send msg to client\r\n    if (err.isOperational) {\r\n      return res.status(err.statusCode).json({\r\n        status: err.status,\r\n        message: err.message,\r\n      });\r\n      // Programming or unknown error, don't leak details - send generic msg\r\n    }\r\n    console.log('ERROR', err);\r\n\r\n    return res.status(500).json({\r\n      status: 'error',\r\n      message: 'Something went very wrong!',\r\n    });\r\n  }\r\n  // RENDERED WEBSITE ERRORS\r\n  if (err.isOperational) {\r\n    return res.status(err.statusCode).render('error', {\r\n      title: 'Something went wrong!',\r\n      msg: err.message,\r\n    });\r\n  }\r\n  return res.status(err.statusCode).render('error', {\r\n    title: 'Something went wrong!',\r\n    msg: 'Please try again later.',\r\n  });\r\n};\r\n\r\nexport const globalErrorHandler = (err, req, res, next) => {\r\n  err.statusCode = err.statusCode || 500;\r\n  err.status = err.status || 'error';\r\n\r\n  if (process.env.NODE_ENV === 'development') {\r\n    sendErrorDev(err, req, res);\r\n  } else if (process.env.NODE_ENV === 'production') {\r\n    let error = { ...err };\r\n    error.message = err.message;\r\n\r\n    if (error.name === 'CastError') error = handleCastErrorDB(error);\r\n    if (error.code === 11000) error = handleDuplicateFieldsDB(error);\r\n    if (error.name === 'ValidationError')\r\n      error = handleValidationErrorDB(error);\r\n    if (error.name === 'JsonWebTokenError') error = handleJWTError();\r\n    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();\r\n\r\n    sendErrorProd(error, req, res);\r\n  }\r\n};\r\n","import Express from 'express';\r\nimport { isLoggedIn, protect } from '../controllers/authController.js';\r\nimport {\r\n  getOverview,\r\n  getTour,\r\n  getLoginForm,\r\n  getAccount,\r\n  getMyBookings,\r\n} from '../controllers/viewsController.js';\r\nimport { createBookingCheckout } from '../controllers/bookingController.js';\r\n\r\nconst router = Express.Router();\r\n\r\nrouter.get('/me', protect, getAccount);\r\nrouter.get('/my-bookings', protect, getMyBookings);\r\n\r\nrouter.get('/', createBookingCheckout, isLoggedIn, getOverview);\r\nrouter.get('/tour/:slug', isLoggedIn, getTour);\r\nrouter.get('/login', isLoggedIn, getLoginForm);\r\n\r\nexport { router as viewRouter };\r\n","import Booking from '../models/bookingModel.js';\r\nimport Tour from '../models/tourModel.js';\r\nimport { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\n\r\nexport const getOverview = catchAsync(async (req, res, next) => {\r\n  const tours = await Tour.find();\r\n  res.status(200).render('overview', {\r\n    title: 'All Tours',\r\n    tours,\r\n  });\r\n});\r\n\r\nexport const getTour = catchAsync(async (req, res, next) => {\r\n  const tour = await Tour.findOne({ slug: req.params.slug })\r\n    .populate({\r\n      path: 'guides',\r\n      select: '-__v -passwordChangedAt',\r\n    })\r\n    .populate({\r\n      path: 'reviews',\r\n      select: 'review rating user',\r\n    });\r\n  if (!tour) {\r\n    return next(new AppError('There is no such tour.', 404));\r\n  }\r\n  res.status(200).render('tour', {\r\n    title: tour.name,\r\n    tour,\r\n  });\r\n});\r\n\r\nexport const getLoginForm = (req, res) => {\r\n  res.status(200).render('login', {\r\n    title: 'Login',\r\n  });\r\n};\r\n\r\nexport const getAccount = (req, res) => {\r\n  res.status(200).render('account', {\r\n    title: 'Your account',\r\n  });\r\n};\r\n\r\nexport const getMyBookings = catchAsync(async (req, res, next) => {\r\n  const bookings = await Booking.find({ user: req.user.id });\r\n  const tourIDs = bookings.map((el) => el.tour);\r\n  const tours = await Tour.find({ _id: { $in: tourIDs } });\r\n\r\n  res.status(200).render('overview', {\r\n    title: 'My Tours',\r\n    tours,\r\n  });\r\n});\r\n","import mongoose from 'mongoose';\r\n\r\nconst bookingSchema = new mongoose.Schema({\r\n  tour: {\r\n    type: mongoose.Schema.ObjectId,\r\n    ref: 'Tour',\r\n    required: [true, 'Booking must belong to a tour.'],\r\n  },\r\n  user: {\r\n    type: mongoose.Schema.ObjectId,\r\n    ref: 'User',\r\n    required: [true, 'Must be logged in book a tour.'],\r\n  },\r\n  price: {\r\n    type: Number,\r\n    required: [true, 'Booking must have a price.'],\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now(),\r\n  },\r\n  paid: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\nbookingSchema.pre(/^find/, function (next) {\r\n  this.populate('user').populate({\r\n    path: 'tour',\r\n    select: 'name',\r\n  });\r\n  next();\r\n});\r\n\r\nconst Booking = mongoose.model('Booking', bookingSchema);\r\n\r\nexport default Booking;\r\n","import Stripe from 'stripe';\r\nimport Tour from '../models/tourModel.js';\r\n// import { AppError } from '../utils/appError.js';\r\nimport catchAsync from '../utils/catchAsync.js';\r\nimport Booking from '../models/bookingModel.js';\r\nimport {\r\n  createOne,\r\n  deleteOne,\r\n  getAll,\r\n  getOne,\r\n  updateOne,\r\n} from './handlerFactory.js';\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\r\n\r\nexport const getCheckoutSession = catchAsync(async (req, res, next) => {\r\n  const tour = await Tour.findById(req.params.tourId);\r\n  const session = await stripe.checkout.sessions.create({\r\n    success_url: `http://localhost:3000/?tour=${req.params.tourId}&user=${req.user.id}&price=${tour.price}`,\r\n    cancel_url: `http://localhost:3000/tour/${tour.slug}`,\r\n    customer_email: req.user.email,\r\n    client_reference_id: req.params.tourId,\r\n    mode: 'payment',\r\n    line_items: [\r\n      {\r\n        price_data: {\r\n          currency: 'usd',\r\n          unit_amount: tour.price * 100,\r\n          product_data: {\r\n            name: `${tour.name} Tour`,\r\n            description: tour.summary,\r\n            images: [`https://www.natours.dev/img/tours/${tour.imageCover}`],\r\n          },\r\n        },\r\n        quantity: 1,\r\n      },\r\n    ],\r\n  });\r\n  res.status(200).json({\r\n    status: 'success',\r\n    session,\r\n    url: session.url,\r\n  });\r\n});\r\n\r\nexport const createBookingCheckout = catchAsync(async (req, res, next) => {\r\n  const { tour, user, price } = req.query;\r\n\r\n  if (!tour && !user && !price) return next();\r\n  await Booking.create({ tour, user, price });\r\n  res.redirect(req.originalUrl.split('?')[0]);\r\n});\r\n\r\nexport const getAllBookings = getAll(Booking);\r\n\r\nexport const getBooking = getOne(Booking);\r\n\r\nexport const createBooking = createOne(Booking);\r\n\r\nexport const updateBooking = updateOne(Booking);\r\n\r\nexport const deleteBooking = deleteOne(Booking);\r\n","import Express from 'express';\r\nimport { protect, restrictTo } from '../controllers/authController.js';\r\nimport {\r\n  getCheckoutSession,\r\n  getAllBookings,\r\n  getBooking,\r\n  createBooking,\r\n  deleteBooking,\r\n  updateBooking,\r\n} from '../controllers/bookingController.js';\r\n\r\nconst router = Express.Router();\r\n\r\nrouter.use(protect);\r\n\r\nrouter.get('/checkout-session/:tourId', getCheckoutSession);\r\n\r\nrouter.use(restrictTo('admin', 'lead-guide'));\r\n\r\nrouter.route('/').get(getAllBookings).post(createBooking);\r\n\r\nrouter.route('/:id').get(getBooking).patch(updateBooking).delete(deleteBooking);\r\n\r\nexport { router as bookingRouter };\r\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}